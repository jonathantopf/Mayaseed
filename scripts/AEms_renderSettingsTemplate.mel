
//
// Copyright (c) 2012-2013 Jonathan Topf
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


//--------------------------------------------------------------------------------------------------
// Utility function to get connected node of an attribute.
//--------------------------------------------------------------------------------------------------

global proc string getConnectedNode(string $nodeName) {
    string $nodes[] = `listConnections($nodeName)`;
    return $nodes[0];
}


//--------------------------------------------------------------------------------------------------
// Directory browser.
//--------------------------------------------------------------------------------------------------

global proc AEfileBrowse(string $attr) {
    rowLayout -nc 3;
    text -label "Output Directory";
    textField  -fileName `getAttr $attr` LocationText;
    symbolButton -image "navButtonBrowse.xpm" -c ("loadPopup(\"" + $attr + "\")");
    setParent ..;
}

global proc AEfileBrowseRepeat(string $attr) {
    textField  -e -fileName `getAttr $attr` LocationText;
}

global proc loadPopup(string $attr) {
    string $loc[0] = `fileDialog2 -fm 3 -okc "save"`;

    if ($loc[0] != "") {
        setAttr -type "string" $attr $loc[0];
        textField -e -fileName `getAttr $attr` LocationText;
    }
}


//--------------------------------------------------------------------------------------------------
// Environment picker.
//--------------------------------------------------------------------------------------------------

global proc AEcustomEnvironmentMenuCreate(string $attr) {
    // get actual node name
    string $nodeNameTokens[];
    tokenize $attr "." $nodeNameTokens;
    int $newStringLength = size($nodeNameTokens[0]);
    string $nodeName = `substring $nodeNameTokens[0] 1 $newStringLength`;
    string $currentEnvironmentConnectionTransform = `getConnectedNode($nodeName + ".environment")`;
    string $currentEnvironmentConnectionTransformRelatives[] = {""};
    if ($currentEnvironmentConnectionTransform != "") {
        $currentEnvironmentConnectionTransformRelatives = `listRelatives $currentEnvironmentConnectionTransform`;
    }
    string $currentEnvironmentConnection = $currentEnvironmentConnectionTransformRelatives[0];

    optionMenuGrp -label "Environment" -cc ("setEnvironmentConnection " + $nodeName) customEnvironmentMenu;
    string $physical_environments[] = `ls -type "ms_physical_environment"`;
    for ($item in $physical_environments) {
        menuItem -label $item;
    }
    string $environments[] = `ls -type "ms_environment"`;
    for ($item in $environments) {
        menuItem -label $item;
    }
    menuItem -label "<none>";
    if ($currentEnvironmentConnection != "") {
        optionMenuGrp -e -v $currentEnvironmentConnection customEnvironmentMenu;  
    }
    button -l " select " -h 20 -w 50 -c ("AEselecConnectedEnvironmentNode " + $nodeName) -p customEnvironmentMenu;
}

global proc AEselecConnectedEnvironmentNode(string $nodeName) {
    string $connectedNode = `getConnectedNode($nodeName + ".environment")`;
    if ($connectedNode != "") {
        select -r $connectedNode;
    } 
}
global proc AEcustomEnvironmentMenuEdit(string $nodeName) {
    deleteUI customEnvironmentMenu;
    AEcustomEnvironmentMenuCreate($nodeName);
}

global proc setEnvironmentConnection(string $nodeName) {
    string $newSelection = `optionMenuGrp -q -v customEnvironmentMenu`;
    $newSelectionAttr = $newSelection + ".nodeState";
    string $environmentConnectionName = $nodeName + ".environment";
    string $currentEnvironmentConnection = `getConnectedNode($nodeName + ".environment")`;
    if ($currentEnvironmentConnection != "") {
        $currentEnvironmentConnection = $currentEnvironmentConnection + ".nodeState";
        select $nodeName;
    }
    if ($newSelection != "<none>") {
        print ("connecting "+$newSelectionAttr+" and "+$environmentConnectionName+"\n");
        connectAttr -f $newSelectionAttr $environmentConnectionName;
    }
}


//--------------------------------------------------------------------------------------------------
// Camera picker.
//--------------------------------------------------------------------------------------------------

global proc AEcustomCameraMenuCreate(string $attr) {
    // get actual node name
    string $nodeNameTokens[];
    tokenize $attr "." $nodeNameTokens;
    int $newStringLength = size($nodeNameTokens[0]);
    string $nodeName = `substring $nodeNameTokens[0] 1 $newStringLength`;
    print $nodeName;

    string $customCameraMenuCommand = "setCameraConnection " + $nodeName;
    optionMenuGrp -label "Camera" -cc $customCameraMenuCommand customCameraMenu;
    string $cameras[] = `ls -cameras`;
    menuItem -label "<none>";
    for ($item in $cameras) {
        string $is_orthographic = `getAttr ($item + ".orthographic")`;
        if ($is_orthographic == 0) {
            menuItem -label $item;
        }
    }

    string $currentCameraConnectionTransform = `getConnectedNode($nodeName + ".camera")`;
    string $currentCameraConnectionTransformRelatives[] = {""};
    if ($currentCameraConnectionTransform != "") {
        $currentCameraConnectionTransformRelatives = `listRelatives $currentCameraConnectionTransform`;
    }
    string $currentCameraConnection = $currentCameraConnectionTransformRelatives[0];

    if ($currentCameraConnection != "") {
        optionMenuGrp -e -v $currentCameraConnection customCameraMenu;  
    }
}

global proc AEcustomCameraMenuEdit(string $nodeName) {
    deleteUI customCameraMenu;
    AEcustomCameraMenuCreate($nodeName);
}

global proc setCameraConnection(string $nodeName) {
    string $newSelection = `optionMenuGrp -q -v customCameraMenu`;
    $newSelectionAttr = $newSelection + ".nodeState";
    string $cameraConnectionName = $nodeName + ".camera";
    string $currentCameraConnection = `getConnectedNode($nodeName + ".camera")`;
    if ($currentCameraConnection != "") {
        $currentCameraConnection = $currentCameraConnection + ".nodeState";
    }
    if ($newSelection != "<none>") {
        connectAttr -f $newSelectionAttr $cameraConnectionName;
    } else {
        if ($currentCameraConnection != ""){
            string $cams[] = `listConnections ($nodeName + ".camera")`;
            disconnectAttr ($cams[0] + "Shape.nodeState") ($nodeName + ".camera");
        }
    }
}


//--------------------------------------------------------------------------------------------------
// Layout definition.
//--------------------------------------------------------------------------------------------------

global proc AEms_renderSettingsTemplate(string $nodeName) {
    editorTemplate -beginNoOptimize;
    editorTemplate -beginScrollLayout;
        editorTemplate -beginLayout "Export Settings" -collapse false;
            editorTemplate -addControl "output_directory";
            editorTemplate -addControl "output_file";
            editorTemplate -addSeparator;
            editorTemplate -addControl "convert_shading_nodes_to_textures";
            editorTemplate -label "Convert Textures to OpenEXR" -addControl "convert_textures_to_exr";
            editorTemplate -label "Overwrite Existing Textures Files" -addControl "overwrite_existing_textures";
            editorTemplate -label "Overwrite Existing Geometry Files" -addControl "overwrite_existing_geometry";
            editorTemplate -addSeparator;
            editorTemplate -addControl "export_maya_lights";
            editorTemplate -addSeparator;
            editorTemplate -label "Export Camera Transformation Motion Blur" -addControl "export_camera_blur";
            editorTemplate -label "Export Assembly Transformation Motion Blur" -addControl "export_transformation_blur";
            editorTemplate -label "Export Object Deformation Motion Blur" -addControl "export_deformation_blur";

            editorTemplate -addControl "motion_samples";
            editorTemplate -addControl "shutter_open_time";
            editorTemplate -addControl "shutter_close_time";
            editorTemplate -addSeparator;
            editorTemplate -addControl "export_animation";
            editorTemplate -addControl "animation_start_frame";
            editorTemplate -addControl "animation_end_frame";
            editorTemplate -addControl "export_animated_textures";
        editorTemplate -endLayout;

        editorTemplate -beginLayout "Output Settings" -collapse true (uiRes("m_AElocatorTemplate.kLocatorAttributes"));
            editorTemplate -callCustom "AEcustomCameraMenuCreate" "AEcustomCameraMenuEdit" "camera";
            editorTemplate -addControl "frame_width";
            editorTemplate -addControl "frame_height";
            editorTemplate -addControl "color_space";
            editorTemplate -addControl "export_straight_alpha";
        editorTemplate -endLayout;

        editorTemplate -beginLayout "Environment Settings" -collapse true;
            editorTemplate -callCustom "AEcustomEnvironmentMenuCreate" "AEcustomEnvironmentMenuEdit" "environment";
            editorTemplate -addControl "render_sky";
            editorTemplate -addControl "scene_ior";
        editorTemplate -endLayout;

        editorTemplate -beginLayout "Camera Settings" -collapse true;;
            editorTemplate -addControl "export_all_cameras_as_thin_lens";
        editorTemplate -endLayout;

        editorTemplate -beginLayout "Assembly Settings" -collapse true;
            editorTemplate -addControl "interpret_sets_as_assemblies";
            editorTemplate -addSeparator;
        editorTemplate -endLayout;

        editorTemplate -beginLayout "Configuration Settings" -collapse true;
            editorTemplate -addControl "sampler";
            editorTemplate -addControl "adaptive_min_samples";
            editorTemplate -addControl "adaptive_max_samples";
            editorTemplate -addControl "adaptive_quality";
            editorTemplate -addSeparator;
            editorTemplate -addControl "uniform_samples";
            editorTemplate -addControl "uniform_decorrelate_pixels";
            editorTemplate -addSeparator;
            editorTemplate -addControl "pt_direct_lighting";
            editorTemplate -addControl "pt_ibl";
            editorTemplate -addControl "pt_caustics";
            editorTemplate -addSeparator;
            editorTemplate -addControl "pt_next_event_estimation";
            editorTemplate -addControl "pt_max_bounces";
            editorTemplate -addControl "pt_light_samples";
            editorTemplate -addControl "pt_environment_samples";
            editorTemplate -addControl "pt_max_ray_intensity";
            editorTemplate -addSeparator;
            editorTemplate -addControl "enable_importance_sampling";
        editorTemplate -endLayout;

        editorTemplate -beginLayout "Advanced Settings" -collapse true;
            editorTemplate -addControl "profile_export";
            editorTemplate -addControl "autodetect_alpha";
            editorTemplate -addControl "force_linear_texture_interpretation";
            editorTemplate -addControl "force_linear_color_interpretation";
            editorTemplate -addControl "start_interactive_render_session";
            editorTemplate -addControl "generate_object_mapping";
            editorTemplate -addControl "optimise_assembly_heirarchy";
        editorTemplate -endLayout;

        AEdependNodeTemplate $nodeName;
        editorTemplate -addExtraControls;
    editorTemplate -endScrollLayout;

    editorTemplate -endNoOptimize;
}
